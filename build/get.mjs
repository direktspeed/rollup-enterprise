import {execSync } from 'child_process'
import { writeFileSync } from 'fs'
const rollupVersion = execSync('curl https://unpkg.com/browse/rollup/ --silent').toString().split('@')[1].split('/')[0]
const baseUrl = `https://unpkg.com/rollup@${rollupVersion}/dist/`

execSync(`mkdir -p ../dist/`)

function patchConfigFormart(code) {
    const originalGetFormart = `const getFormat = (config) => {
        const configFormat = config.format;
        switch (configFormat) {
            case undefined:
            case 'es':
            case 'esm':
            case 'module':
                return 'es';
            case 'cjs':
            case 'commonjs':
                return 'cjs';
            case 'system':
            case 'systemjs':
                return 'system';
            case 'amd':
            case 'iife':
            case 'umd':
                return configFormat;
            default:
                return error({
                    message: \`You must specify "output.format", which can be one of "amd", "cjs", "system", "es", "iife" or "umd".\`,
                    url: \`https://rollupjs.org/guide/en/#outputformat\`
                });
        }
    };`
    const newGetFormart = `const getFormat = (config) => {
        const configFormat = config.format;
        switch (configFormat) {
            case undefined:
            case 'es':
            case 'esm':
            case 'module':
                return 'es';
            case 'cjs':
            case 'commonjs':
            case 'amd':
            case 'iife':
            case 'umd':
            case 'system':
            case 'systemjs':
                return 'system';
            default:
                return error({
                    message: \`You must specify "output.format", which can be one of "system", "es".\`,
                    url: \`https://rollupjs.org/guide/en/#outputformat\`
                });
        }
    };`
    /* This makes the amd and cjs build stuff treeshake able it does not get called */
    //code = code.replace('var finalisers = { system, amd, cjs, es, iife, umd };','var finalisers = { system, es };')   
    return code.replace(originalGetFormart,newGetFormart)
}


const files = ['rollup.d.ts','es/shared/rollup.js','es/shared/watch.js','es/rollup.browser.js'].map(file=>{
    const url = baseUrl+file
    const target = file.split('es/').pop().split('shared/').pop().split('.js')[0]+'.mjs'
    let code = execSync(`curl ${url} --silent`).toString()
    code = '//This file is autogenerated by rollup-enterprise/build/get.mjs do not edit it directly\n'+ code 
    if (target === 'rollup.mjs') {
      code = code.replace(/watch.js/g,'watch.mjs')
      // Add Additional exports
      code = code +`\nexport { 
    applyOptionHook, normalizePlugins, handleGenerateWrite, getOutputOptions, getSortingFileType,
    Graph,getInputOptions,//Create Graph
    Bundle,getOutputOptionsAndPluginDriver,//Create Bundle
    writeOutputFile, //Write bundle
    createOutput, //user readable output from bundle generate and write
    Module,Chunk,ExternalModule// Additional low level apis
}`    
    }
    console.log(url,target)   
    // Allow node style imports via Specifier and also direct file path as in ESMSpec
    if (target === 'rollup.d.ts.mjs') {
        writeFileSync(`../dist/rollup.mjs.d.ts`,`import * as rollup from './rollup';export = rollup`)
        return writeFileSync(`../dist/rollup.d.ts`,code)
    }
    
    //writeFileSync(`../dist/${target}`,code)

})

writeFileSync('../dist/package.json',JSON.stringify({
    "type": "module",
    "name": "rollup-enterprise",
    "version": rollupVersion,
    "description": "Next-generation ES module bundler",
    "main": "rollup.mjs",
    "module": "rollup.mjs",
    "typings": "rollup.d.ts",
    "exports": {
        "import": "./rollup.mjs",
        "node": "./rollup.mjs",
        "browser": "./rollup.browser.mjs"
    },
    "engines": {
        "node": ">=10.0.0"
    }
}))

